{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to NotAlone Documentation","text":"<p>Welcome to the official documentation for NotAlone, a comprehensive platform designed to manage memberships, roles, and payments.</p>"},{"location":"#documentation-sections","title":"Documentation Sections","text":""},{"location":"#for-users","title":"For Users","text":"<ul> <li>Getting Started Guide - Learn how to use NotAlone as a member</li> <li>Member Management - Learn how to manage members and applications</li> <li>Profile management, settings, and basic features</li> </ul>"},{"location":"#for-administrators","title":"For Administrators","text":"<ul> <li>Getting Started - Initial setup and configuration</li> <li>PayPal Setup - Configure payment processing</li> <li>Discourse Setup - Set up community forums</li> <li>Mailjet Setup - Configure email services</li> <li>Tenant Setup - Configure your organization's settings</li> </ul>"},{"location":"#for-developers","title":"For Developers","text":"<p>Important: Before proceeding with development, please complete the Administrator Guide first. Understanding the administrative setup is crucial for effective development.</p> <ul> <li>General Instructions - Development guidelines</li> <li>Routing - Application routing system</li> <li>Schema - Database schema and data structures</li> <li>Payments - Payment system integration</li> <li>CSS Roles - Styling and theming</li> <li>Skeleton Loading - Loading state implementations</li> </ul>"},{"location":"#about-notalone","title":"About NotAlone","text":"<p>NotAlone is a full-featured application that helps organizations manage their members, handle payments, and organize roles efficiently. The platform provides:</p> <ul> <li>Member management and tracking</li> <li>Role-based access control</li> <li>Payment processing and financial management</li> <li>Customizable workflows</li> <li>Reporting capabilities</li> </ul> <p>Choose your documentation section above based on your role and needs. Each section provides detailed information and step-by-step guides to help you make the most of NotAlone.</p>"},{"location":"admin/discourse_setup/","title":"Discourse Setup","text":""},{"location":"admin/discourse_setup/#mailjet-instructions","title":"Mailjet Instructions","text":"<ol> <li>Go to Mailjet and get an SMTP setting for your forum</li> <li>For detailed instructions on setting up Mailjet SMTP, including SPF and DKIM configuration, see our Mailjet Setup Guide</li> </ol>"},{"location":"admin/discourse_setup/#digitalocean-deployment","title":"DigitalOcean Deployment","text":"<p>Watch this video if you want to see a tutorial on how to install discourse:</p> <ol> <li>Create DigitalOcean account</li> <li>From Marketplace, select \"Discourse\"</li> <li> <p>Choose a plan:</p> <ul> <li>Basic droplet</li> <li>Any region</li> <li>Add SSH key for secure access</li> </ul> </li> <li> <p>Configure domain/subdomain:    <pre><code>discourse.yourdomain.com\n</code></pre></p> </li> </ol>"},{"location":"admin/discourse_setup/#discourse-configuration","title":"Discourse Configuration","text":"<ol> <li> <p>Access admin panel:    <pre><code>https://discourse.yourdomain.com/admin\n</code></pre></p> </li> <li> <p>Generate API credentials:</p> </li> <li>Navigate to API settings</li> <li>Create new API key</li> <li> <p>Note down:</p> <ul> <li>API Key</li> <li>API Username</li> <li>API URL</li> </ul> </li> <li> <p>Configure SSO Settings:</p> <ul> <li>Enable invite only: All new users must be explicitly invited by trusted users or staff</li> <li>Enable login required: Require authentication to read content, disallow anonymous access</li> <li>Enable local logins: Allow username and password login based accounts</li> <li>Enable local login via email: Allow users to request one-click login links via email</li> <li>Enable persistent sessions: Users will remain logged in when the web browser is closed</li> <li>Set maximum session age: 12 hours since last visit</li> <li>Enable DiscourseConnect (formerly 'Discourse SSO'): This must be enabled for SSO integration</li> <li>Configure DiscourseConnect URL: Set to your application's SSO endpoint (e.g., https://your-app-url/_/api/discourse-sso)</li> <li>Set DiscourseConnect secret: Create a secure secret string (minimum 10 characters)</li> <li>Enable verbose DiscourseConnect logging: Log detailed SSO diagnostics to /logs</li> <li>Enable auth overrides email: Override local email with external site email on every login</li> <li>Do not enable:<ul> <li>Must approve users</li> <li>Auth overrides username</li> <li>Auth overrides name</li> <li>Discourse connect overrides groups</li> <li>Discourse connect overrides bio</li> <li>Discourse connect overrides avatar</li> <li>Discourse connect overrides profile background</li> <li>Hide email address taken</li> <li>Log out strict</li> </ul> </li> </ul> </li> <li> <p>Configure the API settings by going to Admin &gt; API</p> <ul> <li>Create an API key, save it for entering it in your Anvil app's tenant settings later.</li> <li>Create a webhook that points to https://your-app-url/_/api/new_member.<ul> <li>Give it a secret that you remember for later</li> <li>Select the 'user is created' event</li> <li>Scroll to the bottom of the page and check 'Check TLS...' and 'Active'</li> <li>Hit 'Save'.</li> </ul> </li> </ul> </li> </ol>"},{"location":"admin/getting_started/","title":"Getting Started Guide","text":"<p>This guide will help you set up your development environment for working with the Not Alone app. The app is built using Anvil's web framework and integrates with several external services.</p>"},{"location":"admin/getting_started/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have:</p> <ul> <li>A GitHub account</li> <li>A PayPal business account</li> <li>A DigitalOcean account (for Discourse hosting)</li> <li>A Mailjet account (for Discourse emails)</li> <li>Basic knowledge of Python and web development</li> </ul>"},{"location":"admin/getting_started/#1-set-up-mailjet-and-discourse","title":"1. Set up Mailjet and Discourse","text":"<p>See Discourse Setup</p>"},{"location":"admin/getting_started/#2-set-up-paypal","title":"2. Set up PayPal","text":"<p>See PayPal Setup</p>"},{"location":"admin/getting_started/#3-anvil-setup","title":"3. Anvil Setup","text":"<ol> <li>Visit anvil.works</li> <li>Sign up for a free account</li> <li>Choose the \"Free\" plan (sufficient for development)</li> </ol>"},{"location":"admin/getting_started/#4-repository-setup","title":"4. Repository Setup","text":"<p>You have two options for setting up the repository, depending on your needs:</p>"},{"location":"admin/getting_started/#option-a-fork-the-repository-for-contributing-changes","title":"Option A: Fork the Repository (For Contributing Changes)","text":"<p>If you plan to contribute changes back to the main project:</p> <ol> <li>Fork the Not Alone repository:<ul> <li>Visit https://github.com/yahiakala/notalone-app</li> <li>Click \"Fork\" button</li> <li>Go to your Anvil.works account and click \"Clone from GitHub\" under the \"Create a new app\" section</li> <li>Enter the URL to your forked repo, and authenticate with your GitHub account</li> <li>Click \"Clone App\"</li> </ul> </li> </ol>"},{"location":"admin/getting_started/#option-b-clone-the-repository-for-using-as-is","title":"Option B: Clone the Repository (For Using as Is)","text":"<p>If you just want to use the app without contributing changes:</p> <ol> <li>Clone the Not Alone repository directly:<ul> <li>Go to your Anvil.works account</li> <li>Click \"Clone from GitHub\" under the \"Create a new app\" section</li> <li>Enter https://github.com/yahiakala/notalone-app</li> <li>Click \"Clone App\"</li> </ul> </li> </ol>"},{"location":"admin/getting_started/#setting-up-dependencies","title":"Setting up Dependencies","text":"<p>After either option above:</p> <ul> <li>Go to Settings &gt; Dependencies</li> <li>Use the pencil icon to edit your dependencies, but do not change the versions</li> <li>Make sure the anvil_extras dependency is set to point to a third party dependency with dependency ID C6ZZPAPN4YYF5NVJ. See here for more info. Use the pencil icon. Do not change the tag.</li> <li>Make sure the anvil_squared dependency is set to point to a third party dependency with dependency ID KDKDM3MG6IQHC2FK. Use the pencil icon. Do not change the tag.</li> </ul> <p></p>"},{"location":"admin/getting_started/#5-creating-a-new-app-with-not-alone-as-a-dependency","title":"5. Creating a New App with Not Alone as a Dependency","text":"<p>Create your own app that uses Not Alone as a dependency. You have to do this because you want to eventually edit the SMTP settings and other information without editing the open source app.</p> <p>Create a new Anvil app:</p> <ul> <li>Go to your Anvil.works dashboard</li> <li>Click \"Create New App\"</li> <li>Choose a blank template</li> </ul> <p>Add Not Alone as a dependency:</p> <ul> <li>Go to Settings &gt; Dependencies</li> <li>Click \"Add Dependency\"</li> <li>Choose the notalone app</li> </ul> <p>Copy the startup.py file</p> <p></p> <p>Set your settings for accelerated tables, user settings, and smtp settings:</p> <p></p> <p></p> <p></p>"},{"location":"admin/getting_started/#additional-resources","title":"Additional Resources","text":"<ul> <li>Anvil Documentation</li> <li>PayPal Developer Docs</li> <li>Discourse API Guide</li> <li>Project-specific docs in <code>/docs</code> directory</li> </ul>"},{"location":"admin/mailjet_setup/","title":"Mailjet SMTP Setup Guide","text":"<p>This guide covers how to set up Mailjet as your SMTP provider for sending emails from your application.</p>"},{"location":"admin/mailjet_setup/#important-note","title":"Important Note","text":"<p>Do not use Mailjet subaccounts as they have limitations and can cause issues with email deliverability. Always use the main account for better control and monitoring.</p>"},{"location":"admin/mailjet_setup/#domain-setup","title":"Domain Setup","text":"<ol> <li>Choose a subdomain for sending emails</li> <li>Create a dedicated subdomain for sending emails (e.g., <code>yoursubdomain.yourdomain.com</code>)</li> <li>Using a subdomain isolates your email sending reputation from your main domain</li> <li> <p>Example: If your domain is <code>example.com</code>, use <code>yoursubdomain.example.com</code></p> </li> <li> <p>Add DNS Records</p> </li> <li>Log into your domain registrar or DNS provider</li> <li>Add an A record for your subdomain pointing to Mailjet's servers</li> <li>Add the subdomain to your Mailjet account in Sender Domains section</li> </ol>"},{"location":"admin/mailjet_setup/#spf-setup","title":"SPF Setup","text":"<p>SPF (Sender Policy Framework) helps prevent email spoofing. Add this TXT record to your DNS:</p> <pre><code>Type: TXT\nHost: yoursubdomain\nValue: v=spf1 include:spf.mailjet.com ?all\n</code></pre> <p>Note: If you already have an SPF record, add <code>include:spf.mailjet.com</code> to the existing record.</p>"},{"location":"admin/mailjet_setup/#dkim-setup","title":"DKIM Setup","text":"<p>DKIM (DomainKeys Identified Mail) adds a digital signature to your emails:</p> <ol> <li>In Mailjet dashboard, go to Sender Domains</li> <li>Select your subdomain</li> <li>Click on \"Authentication\"</li> <li>Copy the DKIM records provided by Mailjet</li> <li>Add the records to your DNS</li> </ol> <p>Example of one of the records: <pre><code>Type: TXT\nHost: mailjet._domainkey.yoursubdomain\nValue: [Mailjet will provide this value]\n</code></pre></p>"},{"location":"admin/mailjet_setup/#testing-setup","title":"Testing Setup","text":"<p>Send Test Emails - Use Mailjet's test feature to send verification emails - Check email headers to confirm:     - SPF passes     - DKIM signature is valid     - Proper subdomain usage</p>"},{"location":"admin/mailjet_setup/#smtp-configuration","title":"SMTP Configuration","text":"<p>Use these settings in your application:</p> <pre><code>SMTP Server: in-v3.mailjet.com\nPort: 587 (TLS) or 465 (SSL). I recommend 587\nUsername: [API Key]\nPassword: [Secret Key]\n</code></pre> <p>I recommend you use these SMTP settings not only for your Discourse forum, but for your NotAlone app as well.</p> <p>Here's where you configure it in your app:</p> <p></p>"},{"location":"admin/paypal_setup/","title":"PayPal Setup Guide","text":"<p>This guide covers setting up PayPal for both testing (sandbox) and production environments, specifically for subscription payments and webhooks.</p>"},{"location":"admin/paypal_setup/#sandbox-environment-setup","title":"Sandbox Environment Setup","text":""},{"location":"admin/paypal_setup/#1-create-developer-accounts","title":"1. Create Developer Accounts","text":"<ol> <li>Go to PayPal Developer Dashboard</li> <li>Create two sandbox accounts:<ul> <li>Business account (to receive payments)</li> <li>Personal account (to make test payments)</li> </ul> </li> </ol>"},{"location":"admin/paypal_setup/#2-create-sandbox-app","title":"2. Create Sandbox App","text":"<ol> <li>In Developer Dashboard, go to \"Apps &amp; Credentials\"</li> <li>Click \"Create App\"</li> <li>Select \"Sandbox\" for testing environment</li> <li>Name your application (e.g., \"Not Alone Test\")</li> <li>Note down:<ul> <li>Client ID</li> <li>Client Secret</li> </ul> </li> </ol>"},{"location":"admin/paypal_setup/#3-create-subscription-plans","title":"3. Create Subscription Plans","text":"<ol> <li>Navigate to \"Products &amp; Plans\"</li> <li>Create a product:    <pre><code>Products &gt; Create Product\n</code></pre></li> <li>Create subscription plan(s):<ul> <li>Set billing cycle (use daily for testing)</li> <li>Set price points</li> <li>Note down Plan ID for each plan</li> </ul> </li> </ol>"},{"location":"admin/paypal_setup/#4-configure-webhooks","title":"4. Configure Webhooks","text":"<ol> <li>Go to \"Webhooks\" in Developer Dashboard</li> <li>Click \"Add Webhook\"</li> <li>Enter your webhook URL:    <pre><code>https://your-app-url/_/api/capture-sub\n</code></pre></li> <li>Subscribe to these events:<ul> <li>BILLING.SUBSCRIPTION.ACTIVATED</li> <li>BILLING.SUBSCRIPTION.CANCELLED</li> <li>BILLING.SUBSCRIPTION.EXPIRED</li> <li>BILLING.SUBSCRIPTION.UPDATED</li> <li>PAYMENT.SALE.COMPLETED</li> </ul> </li> <li>Save and note down the Webhook ID</li> </ol>"},{"location":"admin/paypal_setup/#production-environment-setup","title":"Production Environment Setup","text":""},{"location":"admin/paypal_setup/#1-business-account-setup","title":"1. Business Account Setup","text":"<ol> <li>Create or use existing PayPal Business account</li> <li>Ensure your business account is verified and in good standing</li> </ol>"},{"location":"admin/paypal_setup/#2-create-live-app","title":"2. Create Live App","text":"<ol> <li>Go to PayPal Developer Dashboard</li> <li>Click \"Create App\"</li> <li>Select \"Live\" for production environment</li> <li>Name your application (e.g., \"Not Alone\")</li> <li>Note down:<ul> <li>Client ID</li> <li>Client Secret</li> </ul> </li> </ol>"},{"location":"admin/paypal_setup/#3-create-live-subscription-plans","title":"3. Create Live Subscription Plans","text":"<ol> <li>Navigate to \"Products &amp; Plans\"</li> <li>Create your product:    <pre><code>Products &gt; Create Product\n</code></pre></li> <li>Create subscription plan(s):<ul> <li>Set actual billing cycle (monthly/yearly)</li> <li>Set real price points</li> <li>Note down Plan ID for each plan</li> </ul> </li> </ol>"},{"location":"admin/paypal_setup/#4-configure-live-webhooks","title":"4. Configure Live Webhooks","text":"<ol> <li>Go to \"Webhooks\" in Developer Dashboard</li> <li>Click \"Add Webhook\"</li> <li>Enter your production webhook URL:    <pre><code>https://your-production-url/_/api/capture-sub\n</code></pre></li> <li>Subscribe to these events:<ul> <li>BILLING.SUBSCRIPTION.ACTIVATED</li> <li>BILLING.SUBSCRIPTION.CANCELLED</li> <li>BILLING.SUBSCRIPTION.EXPIRED</li> <li>BILLING.SUBSCRIPTION.UPDATED</li> <li>PAYMENT.SALE.COMPLETED</li> </ul> </li> <li>Save and note down the Webhook ID</li> </ol>"},{"location":"admin/paypal_setup/#testing","title":"Testing","text":""},{"location":"admin/paypal_setup/#sandbox-testing-checklist","title":"Sandbox Testing Checklist","text":"<ol> <li> <p>Test subscription creation:</p> <ul> <li>Use sandbox personal account to subscribe</li> <li>Verify webhook notification</li> <li>Check subscription status in business account</li> </ul> </li> <li> <p>Test subscription cancellation:</p> <ul> <li>Cancel subscription from personal account</li> <li>Verify webhook notification</li> <li>Check status update in business account</li> </ul> </li> <li> <p>Test subscription updates:</p> <ul> <li>Modify subscription if your plans allow it</li> <li>Verify webhook notification</li> <li>Confirm changes in both accounts</li> </ul> </li> <li> <p>Test recurring payment processing:</p> <ul> <li>Confirm successful payment capture</li> <li>Verify PAYMENT.SALE.COMPLETED webhook</li> <li>Check payment appears in business account</li> </ul> </li> </ol>"},{"location":"admin/paypal_setup/#production-verification","title":"Production Verification","text":"<p>Before going live:</p> <ol> <li>Verify all webhook endpoints are correctly configured</li> <li>Test a small real transaction</li> <li>Confirm subscription plans are correctly priced</li> <li>Verify all PayPal buttons are using production credentials</li> </ol>"},{"location":"admin/tenant_setup/","title":"Tenant Setup Guide","text":"<p>This guide walks you through setting up a new tenant in the Not Alone app, including PayPal integration, webhook configuration, and admin settings.</p>"},{"location":"admin/tenant_setup/#initial-setup","title":"Initial Setup","text":"<p>Before setting up your tenant, you must configure Discourse and PayPal.</p>"},{"location":"admin/tenant_setup/#1-basic-information","title":"1. Basic Information","text":"<p>After logging in as a tenant admin, navigate to the Admin screen (<code>#app/admin</code>) and configure:</p> <p></p> <p>Organization Details:</p> <ul> <li>Organization name</li> <li>Contact email</li> <li>Upload organization logo</li> <li>Set waiver/terms document URL</li> </ul> <p></p> <p>Integration Settings:</p> <ul> <li>Discourse forum URL</li> <li>Discourse Connect secret (for authenticating users)</li> <li>Discourse API key (for automations)</li> <li>PayPal Client ID and Secret</li> <li>Payment webhook ID</li> </ul> <p></p> <p>PayPal Plan Settings</p> <ul> <li>Enter your PayPal plan information</li> <li>Enter Plan Name, Plan ID (from PayPal), frequency, etc.</li> <li>Assign roles to members who pay through this subscription.</li> </ul> <p>Discord invite link (optional)</p>"},{"location":"admin/tenant_setup/#2-role-configuration","title":"2. Role Configuration","text":"<p>Set up roles for your organization:</p> <p></p> <ol> <li>Navigate to Roles section</li> <li>Some basic roles are already defined and not editable. To create custom roles, see below.</li> </ol> <p></p> <p>For each role, configure:</p> <ul> <li>Role name</li> <li>Associated permissions</li> <li>Upload role guide document (if applicable)</li> </ul> <p></p> <p>By clicking on 'Details' in the Roles screen, you can see which permissions belong to each role. You can also see (end edit) which files are attached for each role. These files serve as guides.</p> <p>Configure permissions for different roles:</p> <p>Basic Permissions:</p> <ul> <li><code>see_members</code>: View member list</li> <li><code>edit_members</code>: Modify member details</li> <li><code>see_forum</code>: Access community forum</li> <li><code>see_financials</code>: View financial reports</li> </ul> <p>Administrative Permissions:</p> <ul> <li><code>delete_admin</code>: Full administrative access</li> <li><code>delete_members</code>: Ability to delete members</li> </ul> <p></p>"},{"location":"cline/documentation_organization/","title":"Documentation Organization Strategy","text":""},{"location":"cline/documentation_organization/#overview","title":"Overview","text":"<p>This document outlines the strategy for organizing the NotAlone app documentation to serve both non-technical administrators and technical contributors effectively.</p>"},{"location":"cline/documentation_organization/#documentation-structure","title":"Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                 # Landing page with clear pathways for different users\n\u251c\u2500\u2500 admin/                   # Non-technical administrator documentation\n\u2502   \u251c\u2500\u2500 quickstart.md       # Quick setup guide for admins\n\u2502   \u251c\u2500\u2500 infrastructure/     # Shared infrastructure setup docs\n\u2502   \u2514\u2500\u2500 management/         # Day-to-day admin operations\n\u251c\u2500\u2500 developer/              # Technical contributor documentation\n\u2502   \u251c\u2500\u2500 quickstart.md      # Developer setup guide\n\u2502   \u251c\u2500\u2500 infrastructure/    # Advanced infrastructure details\n\u2502   \u2514\u2500\u2500 technical/         # Development-specific docs\n\u2514\u2500\u2500 shared/                # Documentation shared between admin and developer\n    \u2514\u2500\u2500 infrastructure/    # Core infrastructure setup\n</code></pre>"},{"location":"cline/documentation_organization/#key-principles","title":"Key Principles","text":"<ol> <li>Clear Entry Points</li> <li>Landing page (index.md) immediately directs users to their relevant section</li> <li>Separate quickstart guides for admins and developers</li> <li> <p>Clear distinction between day-to-day operations and setup</p> </li> <li> <p>Efficient Content Management</p> </li> <li>Shared infrastructure documentation lives in shared/ directory</li> <li>Admin and developer sections reference shared docs when appropriate</li> <li> <p>Each section maintains its own version of infrastructure docs when needed for audience-specific details</p> </li> <li> <p>Navigation Strategy</p> </li> <li>Admin section focuses on operational tasks and basic setup</li> <li>Developer section includes technical details, contribution guidelines, and advanced configuration</li> <li> <p>Cross-references between sections when relevant</p> </li> <li> <p>Content Organization</p> </li> <li> <p>Admin documentation:</p> <ul> <li>Emphasizes UI-based setup steps</li> <li>Focuses on operational tasks</li> <li>Uses more screenshots and visual guides</li> <li>Simplifies technical concepts</li> </ul> </li> <li> <p>Developer documentation:</p> <ul> <li>Includes technical details and architecture</li> <li>Covers contribution workflows</li> <li>Provides API references</li> <li>Includes debugging and development guides</li> </ul> </li> <li> <p>Infrastructure Documentation</p> </li> <li>Core setup steps in shared/infrastructure/</li> <li>Admin section references these with simplified explanations</li> <li>Developer section references these with additional technical context</li> <li>Prevents duplication while maintaining appropriate detail levels</li> </ol>"},{"location":"cline/documentation_organization/#implementation-notes","title":"Implementation Notes","text":"<ol> <li>Shared Content Strategy</li> <li>Use includes or references to shared documentation</li> <li>Maintain separate context-specific wrappers for shared content</li> <li> <p>Clear indicators when viewing shared content</p> </li> <li> <p>Navigation Aids</p> </li> <li>Clear breadcrumbs showing current location</li> <li>Role-based navigation menus</li> <li> <p>Cross-references when content overlaps</p> </li> <li> <p>Content Differentiation</p> </li> <li>Admin content: Focus on \"what\" and \"how\"</li> <li>Developer content: Include \"why\" and \"how it works\"</li> <li> <p>Shared content: Core setup steps and requirements</p> </li> <li> <p>Version Control</p> </li> <li>Shared documentation changes require review for both audiences</li> <li>Audience-specific changes can be reviewed independently</li> <li>Clear change management process for shared content</li> </ol>"},{"location":"cline/documentation_organization/#benefits","title":"Benefits","text":"<ol> <li>Reduced Duplication</li> <li>Shared infrastructure docs prevent content duplication</li> <li> <p>Single source of truth for core setup steps</p> </li> <li> <p>Clear User Paths</p> </li> <li>Users can easily find relevant documentation</li> <li> <p>Natural progression through setup steps</p> </li> <li> <p>Maintainable Structure</p> </li> <li>Clear organization makes updates easier</li> <li> <p>Shared content reduces maintenance burden</p> </li> <li> <p>Scalable Approach</p> </li> <li>Structure can accommodate new documentation</li> <li>Clear places for new content types</li> </ol>"},{"location":"developer/css_roles/","title":"CSS Roles Documentation","text":""},{"location":"developer/css_roles/#overview","title":"Overview","text":"<p>The Not Alone app uses Material Design 3 styling through CSS roles defined in <code>theme/assets/theme.css</code>. These roles are the primary way to style components throughout the application, ensuring consistent design and behavior.</p>"},{"location":"developer/css_roles/#typography-roles","title":"Typography Roles","text":""},{"location":"developer/css_roles/#text-styles","title":"Text Styles","text":"<pre><code>.anvil-role-display {\n  font-size: 57px;\n  line-height: 64px;\n  font-weight: 400;\n}\n\n.anvil-role-headline {\n  font-size: 32px;\n  line-height: 40px;\n  font-weight: 400;\n}\n\n.anvil-role-title {\n  font-size: 22px;\n  line-height: 28px;\n  font-weight: 500;\n}\n\n.anvil-role-body {\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 400;\n}\n\n.anvil-role-input-prompt {\n  font-size: 16px;\n  line-height: 1.5;\n}\n</code></pre> <p>Use these roles to maintain consistent typography: - <code>display</code>: Large, prominent text (e.g., landing page headlines) - <code>headline</code>: Section headers and important text - <code>title</code>: Subsection titles and card headers - <code>body</code>: Default text style for content - <code>input-prompt</code>: Text style for form labels and input fields</p>"},{"location":"developer/css_roles/#button-roles","title":"Button Roles","text":""},{"location":"developer/css_roles/#standard-buttons","title":"Standard Buttons","text":"<pre><code>.anvil-role-filled-button &gt; .btn {\n  background-color: %color:Primary%;\n  color: %color:On Primary%;\n}\n\n.anvil-role-outlined-button &gt; .btn {\n  color: %color:Primary%;\n  border: solid 1px %color:Outline%;\n}\n\n.anvil-role-elevated-button &gt; .btn {\n  color: %color:Primary%;\n  background-color: %color:Surface%;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3), 0 1px 3px 1px rgba(0, 0, 0, 0.15);\n}\n\n.anvil-role-tonal-button &gt; .btn {\n  color: %color:On Secondary Container%;\n  background-color: %color:Secondary Container%;\n}\n</code></pre> <p>Button variants for different contexts: - <code>filled-button</code>: Primary actions with high emphasis - <code>outlined-button</code>: Secondary actions - <code>elevated-button</code>: Important actions that need visual hierarchy - <code>tonal-button</code>: Alternative emphasis buttons</p>"},{"location":"developer/css_roles/#custom-button-roles","title":"Custom Button Roles","text":"<pre><code>.anvil-role-soft-button &gt; .btn {\n    border-radius: 10px;\n}\n\n.anvil-role-google-sign &gt; button {\n    /* Styling for Google sign-in button */\n}\n</code></pre> <p>Special button styles for specific use cases: - <code>soft-button</code>: Buttons with softer corners - <code>google-sign</code>: Custom styling for Google authentication</p>"},{"location":"developer/css_roles/#card-roles","title":"Card Roles","text":"<pre><code>.anvil-role-outlined-card {\n  border-radius: 12px;\n  background-color: %color:Surface%;\n  border: solid 1px %color:Outline%;\n  padding: 15px;\n}\n\n.anvil-role-elevated-card {\n  border-radius: 12px;\n  background-color: %color:Surface%;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3), 0 2px 6px 2px rgba(0, 0, 0, 0.15);\n  padding: 15px;\n}\n\n.anvil-role-tonal-card {\n  border-radius: 12px;\n  background-color: %color:Surface Variant%;\n  padding: 15px;\n}\n</code></pre> <p>Card variants for different content containers: - <code>outlined-card</code>: Basic card with border - <code>elevated-card</code>: Card with shadow for visual hierarchy - <code>tonal-card</code>: Card with variant background color</p>"},{"location":"developer/css_roles/#input-field-roles","title":"Input Field Roles","text":""},{"location":"developer/css_roles/#text-input-styling","title":"Text Input Styling","text":"<pre><code>.anvil-role-outlined {\n  background-color: transparent;\n  border: 1px solid %color:Outline%;\n  border-radius: 4px;\n  color: %color:On Surface%;\n}\n\n.anvil-role-input-error {\n  color: %color:Error%;\n  border-color: %color:Error%;\n}\n</code></pre> <p>Input field variants: - <code>outlined</code>: Standard outlined input fields - <code>input-error</code>: Error state for input fields</p>"},{"location":"developer/css_roles/#layout-roles","title":"Layout Roles","text":"<pre><code>.anvil-role-soft-fp {\n    border-radius: 5px;\n    padding: 0px 20px;\n    border: solid 1px %color:Outline%;\n}\n\n.anvil-role-narrow-col {\n    overflow: hidden;\n    padding: 35px;\n}\n\n.anvil-role-vertically-centered {\n  height: 90vh;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  justify-content: center;\n}\n</code></pre> <p>Layout utility roles: - <code>soft-fp</code>: Flow panel with soft borders - <code>narrow-col</code>: Narrow column layout - <code>vertically-centered</code>: Center content vertically</p>"},{"location":"developer/css_roles/#table-roles","title":"Table Roles","text":"<pre><code>.anvil-role-table-row {\n    border: solid 1px %color:Outline%;\n    border-radius: 12px;\n    display: flex;\n    align-items: center;\n    padding: 15px;\n    margin: 10px 0;\n}\n\n.anvil-role-table-row:hover {\n    background: hsl(315, 100%, 98.22%);\n    opacity: 100%;\n}\n</code></pre> <p>Table styling roles: - <code>table-row</code>: Custom table row styling - Includes hover effects and consistent spacing</p>"},{"location":"developer/css_roles/#loading-state-roles","title":"Loading State Roles","text":"<pre><code>.anvil-role-skeleton {\n  animation: skeleton-loading 1s linear infinite alternate;\n  height: 30px;\n  border-radius: 12px;\n}\n</code></pre> <p>Loading state roles: - <code>skeleton</code>: Animated loading placeholder</p>"},{"location":"developer/css_roles/#usage-examples","title":"Usage Examples","text":""},{"location":"developer/css_roles/#button-examples","title":"Button Examples","text":"<pre><code># Primary action button\nbutton_1.role = 'filled-button'\n\n# Secondary action button\nbutton_2.role = 'outlined-button'\n\n# Elevated button for important actions\nbutton_3.role = 'elevated-button'\n</code></pre>"},{"location":"developer/css_roles/#card-examples","title":"Card Examples","text":"<pre><code># Basic card with border\npanel_1.role = 'outlined-card'\n\n# Elevated card for important content\npanel_2.role = 'elevated-card'\n\n# Tonal card for grouped content\npanel_3.role = 'tonal-card'\n</code></pre>"},{"location":"developer/css_roles/#input-field-examples","title":"Input Field Examples","text":"<pre><code># Standard outlined input\ntext_box.role = 'outlined'\n\n# Error state input\ntext_box.role = 'input-error'\n</code></pre>"},{"location":"developer/css_roles/#layout-examples","title":"Layout Examples","text":"<pre><code># Centered content container\ncolumn_panel.role = 'vertically-centered'\n\n# Narrow column layout\nflow_panel.role = 'narrow-col'\n</code></pre>"},{"location":"developer/css_roles/#best-practices","title":"Best Practices","text":"<ol> <li>Consistent Role Usage</li> <li>Use the same roles for similar components</li> <li> <p>Maintain visual hierarchy through appropriate role selection</p> </li> <li> <p>Component State Management</p> </li> <li>Apply error states using appropriate roles</li> <li> <p>Use loading states for async operations</p> </li> <li> <p>Responsive Design</p> </li> <li>Consider mobile views when applying layout roles</li> <li> <p>Use appropriate spacing roles for different screen sizes</p> </li> <li> <p>Visual Hierarchy</p> </li> <li>Use elevated components sparingly</li> <li> <p>Maintain consistent use of filled vs outlined variants</p> </li> <li> <p>Typography</p> </li> <li>Use appropriate text roles for content hierarchy</li> <li>Maintain readable text sizes and line heights</li> </ol>"},{"location":"developer/css_roles/#custom-role-creation","title":"Custom Role Creation","text":"<p>When creating new custom roles:</p> <ol> <li>Add the role definition to <code>theme/assets/theme.css</code></li> <li>Follow the existing naming convention</li> <li>Document the new role in this guide</li> <li>Consider mobile responsiveness</li> <li>Test across different browsers</li> </ol> <p>Remember that CSS roles are the primary way to style components in the app. Avoid inline styles and maintain consistency by using these predefined roles.</p>"},{"location":"developer/general_instructions/","title":"General Instructions","text":"<p>This document outlines general development guidelines for the Not Alone application.</p>"},{"location":"developer/general_instructions/#linting","title":"Linting","text":""},{"location":"developer/general_instructions/#policy-on-linting-errors","title":"Policy on Linting Errors","text":"<p>Flake8 linting errors should be ignored in this project. Common linting errors you may see include:</p> <ol> <li>Line length warnings (e.g., \"line too long (149 &gt; 79 characters)\")</li> <li>Unused import warnings</li> <li>Blank line warnings</li> <li>Whitespace warnings</li> </ol> <p>These warnings should not be addressed because: - The project prioritizes code readability over strict PEP 8 compliance - Some imports may be used indirectly or needed for type hints - Line length restrictions can make code less readable when broken up - Maintaining consistent style across the codebase is more important than fixing linting warnings</p>"},{"location":"developer/general_instructions/#example","title":"Example","text":"<p>This code with linting errors: <pre><code>from .helpers import print_timestamp, verify_tenant, validate_user, get_usertenant, get_users_with_permission, populate_roles, usertenant_row_to_dict\n\ndef some_long_function_name_with_many_parameters(param1, param2, param3, param4, param5, param6):\n    \"\"\"This is a very long docstring that explains what this function does in great detail.\"\"\"\n    pass\n</code></pre></p> <p>Should be left as-is, even though it triggers linting errors about line length and imports.</p>"},{"location":"developer/general_instructions/#dropdown-components","title":"Dropdown Components","text":"<p>When working with Anvil's dropdown components, follow these guidelines:</p>"},{"location":"developer/general_instructions/#data-format","title":"Data Format","text":"<p>Dropdown items must be provided as a list of tuples, where each tuple contains: 1. Display value (what the user sees) 2. Stored value (what's used programmatically)</p> <pre><code># Correct - list of tuples\ndropdown_items = [\n    (\"John Smith\", \"user123\"),\n    (\"Jane Doe\", \"user456\")\n]\n\n# Incorrect - list of dictionaries\ndropdown_items = [\n    {\"name\": \"John Smith\", \"id\": \"user123\"},\n    {\"name\": \"Jane Doe\", \"id\": \"user456\"}\n]\n</code></pre>"},{"location":"developer/general_instructions/#example-implementation","title":"Example Implementation","text":"<pre><code># In form code\ndef load_users(self):\n    \"\"\"Load users for dropdown selection\"\"\"\n    users = self.get_users()\n\n    # Format users for dropdown\n    user_items = [(u[\"name\"], u[\"id\"]) for u in users]\n\n    # Assign to dropdown\n    self.dd_users.items = user_items\n\n    # Get selected value later\n    selected_id = self.dd_users.selected_value  # Returns the stored value\n</code></pre>"},{"location":"developer/general_instructions/#best-practices","title":"Best Practices","text":"<ol> <li>Always use tuples for dropdown items:</li> <li>First element: Display text</li> <li> <p>Second element: Value to store</p> </li> <li> <p>When converting from other formats: <pre><code># Converting from dict format\nusers = [{\"name\": \"User\", \"id\": \"123\"}]\ndropdown_items = [(u[\"name\"], u[\"id\"]) for u in users]\n</code></pre></p> </li> <li> <p>Handling selected values: <pre><code># Getting selected value\nselected_id = dropdown.selected_value  # Returns second element of tuple\n\n# Setting selected value\ndropdown.selected_value = \"user123\"  # Use stored value, not display text\n</code></pre></p> </li> <li> <p>Empty state handling: <pre><code># Provide empty list if no items\ndropdown.items = [] if not users else [(u[\"name\"], u[\"id\"]) for u in users]\n</code></pre></p> </li> </ol>"},{"location":"developer/general_instructions/#http-requests-with-anvilhttp","title":"HTTP Requests with anvil.http","text":"<p>When making HTTP requests using anvil.http, follow these guidelines:</p> <ol> <li> <p>Use json=True for JSON requests: <pre><code># Correct - use json=True for both request body and response parsing\nresponse = anvil.http.request(\n    url=\"https://api.example.com/data\",\n    method=\"POST\",\n    headers={\"Content-Type\": \"application/json\"},\n    json=True,  # Request body will be JSON-encoded\n    data=data,  # body goes through the data arg\n    timeout=30\n)\n\n# Incorrect - don't use json_response=True\nresponse = anvil.http.request(\n    url=\"https://api.example.com/data\",\n    json_response=True  # Wrong parameter name\n)\n</code></pre></p> </li> <li> <p>Error Handling: <pre><code># Correct - let anvil.http handle errors\ndef make_request():\n    return anvil.http.request(\n        url=\"https://api.example.com/data\",\n        method=\"GET\",\n        json=True\n    )\n\n# Incorrect - don't wrap in try-except\ndef make_request():\n    try:\n        return anvil.http.request(...)\n    except anvil.http.HttpError as e:  # Unnecessary error handling\n        raise Exception(str(e))\n</code></pre></p> </li> <li> <p>Optional Parameters:</p> </li> <li>Use timeout for time-sensitive requests</li> <li>Set appropriate headers for API calls</li> <li>Use json=True when working with JSON APIs</li> </ol> <p>This ensures consistent and reliable HTTP request handling across the application.</p>"},{"location":"developer/general_instructions/#button-click-event-handlers","title":"Button Click Event Handlers","text":"<p>When implementing button click event handlers that make server calls, follow this pattern:</p> <ol> <li>Disable the button immediately to prevent double-clicks</li> <li>Update button text to indicate processing state</li> <li>Use no_loading_indicator to prevent the default loading spinner</li> <li>Restore button state after the operation completes</li> <li>Do not add alerts or other user feedback unless explicitly requested</li> </ol> <p>Example: <pre><code>def btn_save_click(self, **event_args):\n    \"\"\"Save data to server\"\"\"\n    # Disable button and show processing state\n    self.btn_save.enabled = False\n    self.btn_save.text = \"Saving...\"\n\n    # Make server call without loading indicator\n    with anvil.server.no_loading_indicator:\n        updated_data = anvil.server.call(\n            'save_data',\n            self.text_box.text\n        )\n\n        # Update any client state if needed\n        Global.some_data = updated_data\n\n    # Restore button state\n    self.btn_save.text = \"Save\"\n    self.btn_save.enabled = True\n</code></pre></p> <p>This pattern ensures: - No accidental double-submissions - Clear visual feedback during processing - No disruptive loading spinners - Proper button state restoration - No unnecessary alerts or popups</p>"},{"location":"developer/general_instructions/#user-feedback","title":"User Feedback","text":"<p>User feedback through alerts should only be added when explicitly requested. When requested, use Anvil's built-in alert function: <pre><code># Correct - use Anvil's alert function when requested\nalert(\"Operation completed successfully\")\n\n# Incorrect - Notification is not a valid Anvil function\nNotification(\"Operation completed successfully\").show()\n</code></pre></p>"},{"location":"developer/general_instructions/#testing-the-application","title":"Testing the Application","text":"<p>The application can be tested using the development deployment. The deployment information is stored in <code>docs/.deployment.txt</code> and includes a URL, an email, and a password.</p> <p>To test the application:</p> <ol> <li>Visit the deployment URL in your browser</li> <li>Sign in using the provided email and password</li> <li>Test functionality in the development environment</li> <li>Remember that this is a development deployment, so use it only for testing purposes</li> </ol>"},{"location":"developer/general_instructions/#best-practices-for-testing","title":"Best Practices for Testing","text":"<ol> <li>Always test changes in the development deployment before deploying to production</li> <li>Use the provided test account credentials</li> <li>Test all affected functionality after making changes</li> <li>Clear browser cache if you encounter unexpected behavior</li> <li>Report any issues found during testing</li> </ol>"},{"location":"developer/general_instructions/#import-guidelines","title":"Import Guidelines","text":""},{"location":"developer/general_instructions/#avoid-top-level-imports-for-public-packages","title":"Avoid Top-Level Imports for Public Packages","text":"<p>Public Python packages should be imported within functions or methods where they are used, rather than at the module level. This practice: - Reduces memory usage by only importing when needed - Improves startup time by deferring imports until they're required - Makes dependencies clearer and more localized</p> <pre><code># Incorrect - top-level import\nimport datetime\n\ndef process_date(date_string):\n    return datetime.datetime.strptime(date_string, '%Y-%m-%dT%H:%M:%SZ')\n\n# Correct - import within function\ndef process_date(date_string):\n    import datetime as dt\n    return dt.datetime.strptime(date_string, '%Y-%m-%dT%H:%M:%SZ')\n</code></pre>"},{"location":"developer/general_instructions/#exceptions","title":"Exceptions","text":"<p>The following imports are allowed at the top level: - Internal project imports (e.g., <code>from .helpers import validate_user</code>) - Anvil framework imports (e.g., <code>import anvil.server</code>, <code>import anvil.users</code>) - Type hints in stub files</p> <p>This guideline helps maintain efficient resource usage and clear dependency management throughout the application.</p>"},{"location":"developer/general_instructions/#best-practices_1","title":"Best Practices","text":"<p>While linting errors should be ignored, developers should still follow these best practices:</p> <ol> <li>Write clear, descriptive variable and function names</li> <li>Include docstrings for functions and modules</li> <li>Maintain consistent indentation</li> <li>Use meaningful whitespace to improve readability</li> <li>Follow the established patterns in the codebase</li> </ol> <p>The focus should be on writing maintainable, secure code that follows the project's architectural patterns rather than strict adherence to linting rules.</p>"},{"location":"developer/payments/","title":"Payment System Documentation","text":""},{"location":"developer/payments/#overview","title":"Overview","text":"<p>The Not Alone app implements a multi-tenant payment system using PayPal subscriptions. Each tenant can configure their own PayPal integration and subscription plans, which their members can then subscribe to.</p>"},{"location":"developer/payments/#important-paypal-webhook-limitations","title":"Important PayPal Webhook Limitations","text":"<p>Note: PayPal does not generate webhook events for merchant-initiated subscription cancellations (cancellations done through PayPal's interface). While subscriber-initiated cancellations trigger the BILLING.SUBSCRIPTION.CANCELLED webhook properly, cancellations done by merchants through PayPal's dashboard do not generate any webhook events. To handle this limitation, the app implements a periodic subscription status check.</p>"},{"location":"developer/payments/#development-and-testing-requirements","title":"Development and Testing Requirements","text":"<p>Important: For test deployments, the deployment URL must contain either 'debug' or 'test' in the URL (e.g., 'https://debug-myapp.anvil.app' or 'https://test-myapp.anvil.app'). This is required for the app to automatically use PayPal's sandbox APIs instead of production APIs. If the URL does not contain 'debug' or 'test', the app will use production PayPal APIs.</p>"},{"location":"developer/payments/#webhook-configuration-requirements","title":"Webhook Configuration Requirements","text":"<p>When setting up webhooks in PayPal, you must subscribe to the following events: - BILLING.SUBSCRIPTION.ACTIVATED - BILLING.SUBSCRIPTION.CANCELLED - BILLING.SUBSCRIPTION.EXPIRED - BILLING.SUBSCRIPTION.UPDATED - PAYMENT.SALE.COMPLETED (required for payment processing)</p> <p>The PAYMENT.SALE.COMPLETED event is particularly important as it's used to update payment expiry dates and process completed payments.</p>"},{"location":"developer/payments/#tenant-configuration","title":"Tenant Configuration","text":""},{"location":"developer/payments/#paypal-integration-setup","title":"PayPal Integration Setup","text":"<p>Each tenant requires the following PayPal configuration in the <code>tenants</code> table: - <code>paypal_client_id</code>: PayPal API client ID - <code>paypal_secret</code>: PayPal API secret - <code>paypal_plans</code>: JSON object containing subscription plan configurations - <code>paypal_webhook_id</code>: PayPal webhook identifier for subscription notifications - <code>paypal_webhook_certificate</code>: PayPal webhook certificate for verification</p>"},{"location":"developer/payments/#subscription-plans","title":"Subscription Plans","text":"<p>Plans are configured in the <code>paypal_plans</code> field of the tenants table as a JSON object:</p> <pre><code>{\n  \"id\": \"PLAN_ID\",\n  \"amt\": 25.00,\n  \"roles\": [\"Member\"],\n  \"name\": \"Monthly Membership\",\n  \"description\": \"Regular monthly membership subscription\"\n}\n</code></pre> <p>Each plan specifies: - PayPal plan ID - Amount to charge - Roles to assign upon successful subscription - Plan name and description</p>"},{"location":"developer/payments/#payment-flow","title":"Payment Flow","text":""},{"location":"developer/payments/#1-subscription-creation","title":"1. Subscription Creation","text":"<p>When a user initiates a subscription:</p> <pre><code>@anvil.server.callable(require_user=True)\ndef create_sub(tenant_id, plan_id):\n    # Validate user and tenant\n    tenant, usermap, permissions = validate_user(tenant_id, user)\n\n    # Get PayPal credentials\n    client_id = anvil.secrets.decrypt_with_key('encryption_key', tenant['paypal_client_id'])\n    client_secret = anvil.secrets.decrypt_with_key('encryption_key', tenant['paypal_secret'])\n\n    # Create subscription\n    response = create_subscription(client_id, client_secret, plan_id, return_url, cancel_url)\n\n    # Update user record\n    usermap['fee'] = plan['amt']\n    usermap['paypal_sub_id'] = response['id']\n</code></pre>"},{"location":"developer/payments/#2-paypal-redirect","title":"2. PayPal Redirect","text":"<p>The user is redirected to PayPal to complete the subscription:</p> <pre><code>def pay_click(self, item, **event_args):\n    self.member, self.payment_url = anvil.server.call(\"create_sub\", Global.tenant_id, item['id'])\n    window.location.href = self.payment_url\n</code></pre>"},{"location":"developer/payments/#3-webhook-processing","title":"3. Webhook Processing","text":"<p>PayPal webhooks notify the application of subscription status changes:</p> <pre><code>@anvil.server.http_endpoint('/capture-sub', methods=['POST'])\ndef capture_sub(**params):\n    # Verify webhook authenticity\n    if not verify_webhook(client_id, client_secret, webhook_id, headers, body):\n        return anvil.server.HttpResponse(400)\n\n    # Process subscription update in background\n    anvil.server.launch_background_task('update_subscription', usermap, headers, body)\n</code></pre>"},{"location":"developer/payments/#4-subscription-updates","title":"4. Subscription Updates","text":"<p>Background task processes subscription status changes:</p> <pre><code>@anvil.server.background_task\ndef update_subscription(usermap, headers, body):\n    # Update roles based on subscription status\n    if body['resource']['status'] == 'EXPIRED':\n        remove_subscription_roles(usermap, plan)\n    elif body['resource']['status'] == 'ACTIVE':\n        add_subscription_roles(usermap, plan)\n\n    # Update payment status and fee\n    usermap['payment_status'] = body['resource']['status']\n    usermap['fee'] = get_subscription_amount(body)\n</code></pre>"},{"location":"developer/payments/#client-side-implementation","title":"Client-Side Implementation","text":""},{"location":"developer/payments/#member-detail-view","title":"Member Detail View","text":"<p>The MemberDetail component handles payment UI:</p> <ol> <li> <p>Displays current subscription status: <pre><code>if 'see_forum' in self.member['permissions']:\n    self.cp_payment_status.visible = True\n    if self.member['payment_status'] == 'CANCELLED':\n        self.lbl_fee_paid_copy.text = \"Subscription cancelled but membership still in good standing.\"\n</code></pre></p> </li> <li> <p>Shows subscription cancellation option: <pre><code>if self.member['paypal_sub_id']:\n    self.btn_cancel_sub.visible = True\n</code></pre></p> </li> <li> <p>Displays pricing plans for new subscriptions: <pre><code>if 'see_forum' not in self.member['permissions']:\n    for plan in Global.tenant['paypal_plans']:\n        self.fp_pricing_table.add_component(PriceCard(item=plan))\n</code></pre></p> </li> </ol>"},{"location":"developer/payments/#server-side-implementation","title":"Server-Side Implementation","text":""},{"location":"developer/payments/#paypal-api-integration","title":"PayPal API Integration","text":"<p>The <code>paypal.py</code> module handles PayPal API interactions:</p> <ol> <li> <p>Authentication: <pre><code>def get_paypal_auth(client_id, client_secret):\n    auth_response = anvil.http.request(\n        TOKEN_URL,\n        method=\"POST\",\n        username=client_id,\n        password=client_secret,\n        data={'grant_type': 'client_credentials'}\n    )\n    return auth_response['access_token']\n</code></pre></p> </li> <li> <p>Subscription Management: <pre><code>def create_subscription(client_id, client_secret, plan_id, return_url, cancel_url):\n    access_token = get_paypal_auth(client_id, client_secret)\n    return anvil.http.request(\n        SUBSCRIPTION_URL,\n        method='POST',\n        headers={'Authorization': f'Bearer {access_token}'},\n        data={'plan_id': plan_id, 'application_context': {...}}\n    )\n</code></pre></p> </li> <li> <p>Webhook Verification: <pre><code>def verify_webhook(client_id, client_secret, webhook_id, headers, body):\n    access_token = get_paypal_auth(client_id, client_secret)\n    response = anvil.http.request(\n        VERIFY_URL,\n        headers={'Authorization': f'Bearer {access_token}'},\n        data={'webhook_id': webhook_id, 'webhook_event': body, ...}\n    )\n    return response['verification_status'] == 'SUCCESS'\n</code></pre></p> </li> </ol>"},{"location":"developer/payments/#revenue-tracking","title":"Revenue Tracking","text":"<p>The system tracks revenue through the <code>finances</code> table:</p> <pre><code>def calc_rev12():\n    for tenant in app_tables.tenants.search():\n        tenantfin = app_tables.finances.get(tenant=tenant)\n        # Calculate total revenue (including PayPal fees)\n        total_rev = sum((user['fee'] * 0.97 - 0.3)\n                       for user in active_paying_users(tenant))\n        tenantfin['rev_12'] = total_rev\n</code></pre>"},{"location":"developer/payments/#best-practices","title":"Best Practices","text":"<ol> <li>Secure Credential Storage</li> <li>Store PayPal credentials encrypted in the tenant table</li> <li> <p>Use <code>anvil.secrets.decrypt_with_key()</code> to access credentials</p> </li> <li> <p>Webhook Security</p> </li> <li>Always verify webhook authenticity before processing</li> <li>Use background tasks for webhook processing to prevent timeouts</li> <li> <p>Be aware that merchant-initiated cancellations won't trigger webhooks</p> </li> <li> <p>Error Handling</p> </li> <li>Implement proper error handling for PayPal API calls</li> <li> <p>Provide clear feedback to users on payment failures</p> </li> <li> <p>Subscription Management</p> </li> <li>Keep subscription IDs and status in sync with PayPal</li> <li>Update user roles immediately upon subscription changes</li> <li> <p>Run periodic status checks to catch merchant-initiated cancellations</p> </li> <li> <p>Revenue Calculations</p> </li> <li>Account for PayPal fees in revenue calculations</li> <li>Track both total and active subscription revenue</li> </ol>"},{"location":"developer/routing/","title":"Hash-Based Routing Documentation","text":""},{"location":"developer/routing/#overview","title":"Overview","text":"<p>The Not Alone app uses <code>anvil_extras.routing</code> for client-side navigation through hash-based routing. This enables single-page application (SPA) behavior with clean URLs and browser history support.</p>"},{"location":"developer/routing/#routing-architecture","title":"Routing Architecture","text":""},{"location":"developer/routing/#template-system","title":"Template System","text":"<p>The app uses two main templates for routing:</p> <ol> <li><code>Router</code> template - Main application layout with sidebar navigation</li> <li><code>Static</code> template - Used for authentication pages (sign in/up)</li> </ol> <p>The Router template is decorated with a condition to ensure the tenant is set:</p> <pre><code>@routing.template(path='app', priority=5, condition=lambda: Global.get_s('tenant') is not None)\nclass Router(RouterTemplate):\n    # ...\n</code></pre>"},{"location":"developer/routing/#url-structure","title":"URL Structure","text":"<p>URLs in the application follow these patterns:</p> <ul> <li>Authentication: <code>#sign</code>, <code>#signin</code>, <code>#signup</code></li> <li>Main app: <code>#app/[section]</code></li> <li>Detail views: <code>#app/[section]/[id]</code></li> </ul>"},{"location":"developer/routing/#route-definitions","title":"Route Definitions","text":""},{"location":"developer/routing/#authentication-routes","title":"Authentication Routes","text":"<pre><code>@routing.route('', template='Static')\n@routing.route('sign', template='Static', url_keys=[routing.ANY])\nclass Sign(SignTemplate):\n    # ...\n\n@routing.route('signin', template='Static', url_keys=[routing.ANY])\nclass Signin(SigninTemplate):\n    # ...\n\n@routing.route('signup', template='Static', url_keys=[routing.ANY])\nclass Signup(SignupTemplate):\n    # ...\n</code></pre>"},{"location":"developer/routing/#main-application-routes","title":"Main Application Routes","text":"<pre><code>@routing.route('/home', template='Router')\nclass Home(HomeTemplate):\n    # ...\n\n@routing.route('/members', template='Router', url_keys=[routing.ANY])\nclass Members(MembersTemplate):\n    # ...\n\n@routing.route('/volunteers', template='Router')\nclass Roles(RolesTemplate):\n    # ...\n</code></pre>"},{"location":"developer/routing/#detail-view-routes","title":"Detail View Routes","text":"<pre><code>@routing.route(\"/memberdetail\", template=\"Router\", url_keys=['user_email'])\n@routing.route('/profile', template='Router')\nclass MemberDetail(MemberDetailTemplate):\n    # ...\n\n@routing.route('/roledetail', template='Router', url_keys=['role'])\nclass RoleDetail(RoleDetailTemplate):\n    # ...\n</code></pre>"},{"location":"developer/routing/#navigation-implementation","title":"Navigation Implementation","text":""},{"location":"developer/routing/#url-hash-management","title":"URL Hash Management","text":"<p>The Router component manages URL hashes for navigation links:</p> <pre><code>def __init__(self, **properties):\n    self.init_components(**properties)\n\n    self.link_home.tag.url_hash = 'app/home'\n    self.link_apply.tag.url_hash = 'app/apply'\n    self.link_profile.tag.url_hash = 'app/profile'\n    self.link_members.tag.url_hash = 'app/members'\n    self.link_fin.tag.url_hash = 'app/financials'\n    self.link_volunteers.tag.url_hash = 'app/volunteers'\n    self.link_admin.tag.url_hash = 'app/admin'\n    self.link_reports.tag.url_hash = 'app/reports'\n    self.link_settings.tag.url_hash = 'app/settings'\n</code></pre>"},{"location":"developer/routing/#navigation-events","title":"Navigation Events","text":"<p>The Router handles navigation events and updates UI state:</p> <pre><code>def nav_click(self, sender, **event_args):\n    if sender.tag.url_hash == '':\n        if Global.user:\n            self.set_account_state(Global.user)\n            routing.set_url_hash('app')\n        else:\n            routing.set_url_hash('')\n    else:\n        routing.set_url_hash(sender.tag.url_hash)\n\ndef on_navigation(self, url_hash, url_pattern, url_dict, unload_form):\n    # Update selected state of navigation links\n    for link in self.cp_sidebar.get_components():\n        if type(link) == Link:\n            link.role = 'selected' if link.tag.url_hash == url_hash else None\n    if url_hash in ['homeanon', 'homedetail', 'app']:\n        self.link_home.role = 'selected'\n</code></pre>"},{"location":"developer/routing/#route-parameters","title":"Route Parameters","text":"<p>Some routes accept parameters through <code>url_keys</code>:</p> <ol> <li>Member Detail View: <pre><code>@routing.route(\"/memberdetail\", template=\"Router\", url_keys=['user_email'])\n</code></pre></li> <li>Accepts user email as parameter</li> <li> <p>URL format: <code>#app/memberdetail?user_email=example@email.com</code></p> </li> <li> <p>Role Detail View: <pre><code>@routing.route('/roledetail', template='Router', url_keys=['role'])\n</code></pre></p> </li> <li>Accepts role identifier as parameter</li> <li>URL format: <code>#app/roledetail?role=role_id</code></li> </ol>"},{"location":"developer/routing/#authentication-and-routing","title":"Authentication and Routing","text":"<p>The routing system integrates with authentication:</p> <pre><code>def link_logout_click(self, **event_args):\n    with anvil.server.no_loading_indicator:\n        anvil.users.logout()\n        self.set_account_state(None)\n        routing.clear_cache()\n        Global.clear_global_attributes()\n        routing.set_url_hash('sign', load_from_cache=False)\n</code></pre> <p>Key features: - Clears routing cache on logout - Redirects to sign-in page - Prevents cached data from persisting across sessions</p>"},{"location":"developer/routing/#best-practices","title":"Best Practices","text":"<ol> <li>Template Selection</li> <li>Use <code>Router</code> template for authenticated pages</li> <li> <p>Use <code>Static</code> template for authentication flows</p> </li> <li> <p>URL Parameters</p> </li> <li>Use <code>url_keys</code> for required parameters</li> <li> <p>Use <code>routing.ANY</code> for optional parameters</p> </li> <li> <p>Navigation State</p> </li> <li>Update selected states in <code>on_navigation</code></li> <li>Clear cache when logging out</li> <li> <p>Use <code>routing.set_url_hash()</code> for programmatic navigation</p> </li> <li> <p>Conditional Routes</p> </li> <li>Use template conditions for access control</li> <li> <p>Check permissions before allowing navigation</p> </li> <li> <p>Cache Management</p> </li> <li>Clear routing cache when user state changes</li> <li>Use <code>load_from_cache=False</code> when fresh data is required</li> </ol>"},{"location":"developer/schema/","title":"Database Schema Documentation","text":""},{"location":"developer/schema/#overview","title":"Overview","text":"<p>The Not Alone application uses several interconnected tables to manage users, roles, permissions, tenants, and various other features. This document outlines the database schema and relationships between tables.</p>"},{"location":"developer/schema/#tables","title":"Tables","text":""},{"location":"developer/schema/#users","title":"Users","text":"<p>Primary user account information and authentication.</p> <p>Note: Several columns in this table are obsolete and have been superseded by columns in the <code>usermap</code> table.</p>"},{"location":"developer/schema/#columns","title":"Columns","text":"<ul> <li>email (string): Primary identifier for users</li> <li>enabled (boolean): Whether the account is active</li> <li>last_login (datetime): Last user login timestamp</li> <li>password_hash (string): Hashed user password</li> <li>n_password_failures (number): Count of failed login attempts</li> <li>confirmed_email (boolean): Email verification status</li> <li>remembered_logins (simpleObject): Stored login sessions</li> <li>mfa (simpleObject): Multi-factor authentication settings</li> <li>signed_up (datetime): Account creation timestamp</li> <li>email_confirmation_key (string): Email verification token</li> </ul>"},{"location":"developer/schema/#usermap","title":"Usermap","text":"<p>Maps users to tenants and roles, containing user-tenant specific data. This table supersedes several columns from the users table.</p>"},{"location":"developer/schema/#columns_1","title":"Columns","text":"<ul> <li>user (link_single \u2192 users): Reference to user account</li> <li>roles (link_multiple \u2192 roles): User's roles within tenant</li> <li>tenant (link_single \u2192 tenants): Associated tenant</li> <li>notes (string): User-specific notes</li> <li>fee (number): User's fee amount</li> <li>paypal_sub_id (string): PayPal subscription identifier</li> <li>consent_check (boolean): User consent status</li> <li>booking_link (string): User's booking link</li> <li>payment_expiry (date): Payment expiration date</li> <li>payment_status (string): Current payment status</li> <li>discord (string): Discord identifier</li> <li>phone (string): Contact phone number</li> <li>screening_slots (simpleObject): Available screening slots</li> <li>first_name (string): User's first name</li> <li>last_name (string): User's last name</li> </ul>"},{"location":"developer/schema/#tenants","title":"Tenants","text":"<p>Organization/tenant configuration and settings.</p>"},{"location":"developer/schema/#columns_2","title":"Columns","text":"<ul> <li>email (string): Primary contact email</li> <li>name (string): Organization name</li> <li>waiver (string): Waiver document/link</li> <li>logo (media): Organization logo</li> <li>discourse_api_key (string): Discourse API credentials</li> <li>discourse_secret (string): Discourse API secret</li> <li>paypal_client_id (string): PayPal integration ID</li> <li>paypal_plans (simpleObject): PayPal plan configurations</li> <li>paypal_secret (string): PayPal API secret</li> <li>discourse_url (string): Discourse forum URL</li> <li>discord_invite (string): Discord invite link</li> <li>paypal_webhook_id (string): PayPal webhook identifier</li> <li>paypal_webhook_certificate (string): PayPal webhook certificate</li> <li>new_roles (simpleObject): Role configurations</li> <li>custom_reports (simpleObject): Custom report settings</li> <li>smtp_email (string): SMTP email configuration</li> </ul>"},{"location":"developer/schema/#roles","title":"Roles","text":"<p>Role definitions and permissions.</p>"},{"location":"developer/schema/#columns_3","title":"Columns","text":"<ul> <li>name (string): Role name</li> <li>reports_to (string): Reporting hierarchy</li> <li>tenant (link_single \u2192 tenants): Associated tenant</li> <li>guide (media): Role guide document</li> <li>last_update (date): Last modification date</li> <li>permissions (link_multiple \u2192 permissions): Associated permissions</li> <li>can_edit (boolean): Edit permission flag</li> </ul>"},{"location":"developer/schema/#permissions","title":"Permissions","text":"<p>System permissions definitions.</p>"},{"location":"developer/schema/#columns_4","title":"Columns","text":"<ul> <li>name (string): Permission identifier</li> <li>description (string): Permission description</li> </ul>"},{"location":"developer/schema/#files","title":"Files","text":"<p>File storage and management.</p>"},{"location":"developer/schema/#columns_5","title":"Columns","text":"<ul> <li>path (string): File path/location</li> <li>file (media): Stored file</li> <li>file_version (string): Version identifier</li> </ul>"},{"location":"developer/schema/#rolefiles","title":"RoleFiles","text":"<p>Role-specific file associations.</p>"},{"location":"developer/schema/#columns_6","title":"Columns","text":"<ul> <li>name (string): File name</li> <li>file (media): Associated file</li> <li>role (link_single \u2192 roles): Related role</li> </ul>"},{"location":"developer/schema/#notes","title":"Notes","text":"<p>User/tenant specific notes.</p>"},{"location":"developer/schema/#columns_7","title":"Columns","text":"<ul> <li>notes (string): Note content</li> <li>user (link_single \u2192 users): Associated user</li> <li>tenant (link_single \u2192 tenants): Associated tenant</li> </ul>"},{"location":"developer/schema/#forum","title":"Forum","text":"<p>Forum/chat integration settings.</p>"},{"location":"developer/schema/#columns_8","title":"Columns","text":"<ul> <li>discourse_secret (string): Discourse API secret</li> <li>discourse_url (string): Discourse forum URL</li> <li>tenant (link_single \u2192 tenants): Associated tenant</li> <li>discord_invite (string): Discord invite link</li> </ul>"},{"location":"developer/schema/#finances","title":"Finances","text":"<p>Financial tracking and budgeting.</p>"},{"location":"developer/schema/#columns_9","title":"Columns","text":"<ul> <li>rev_12 (number): Revenue metric</li> <li>budgets (simpleObject): Budget configurations</li> <li>tenant (link_single \u2192 tenants): Associated tenant</li> <li>rev_12_active (number): Active revenue metric</li> </ul>"},{"location":"developer/schema/#key-relationships","title":"Key Relationships","text":"<ol> <li>Users \u2192 Tenants: Users belong to tenants through both the users table and usermap table</li> <li>Users \u2192 Roles: Users are assigned roles through the usermap table</li> <li>Roles \u2192 Permissions: Roles have multiple associated permissions</li> <li>Roles \u2192 RoleFiles: Roles can have associated files</li> <li>Tenants \u2192 Forum: Tenants have associated forum configurations</li> <li>Tenants \u2192 Finances: Tenants have associated financial records</li> </ol>"},{"location":"developer/schema/#migration-notes","title":"Migration Notes","text":"<p>The application has undergone a schema evolution where user-tenant specific data was moved from the users table to the usermap table. This allows for better multi-tenant support and cleaner separation of concerns. When working with user data, prefer the fields in usermap over their counterparts in the users table.</p>"},{"location":"developer/skeleton_loading/","title":"Skeleton Loading States","text":"<p>The Not Alone app uses skeleton loading states to provide a better user experience while data is being fetched or processed. This is implemented through a CSS role called <code>skeleton</code> that can be applied to various Anvil components.</p>"},{"location":"developer/skeleton_loading/#implementation","title":"Implementation","text":"<p>The skeleton loading effect is defined in <code>theme/assets/theme.css</code> and consists of:</p> <pre><code>.anvil-role-skeleton {\n  animation: skeleton-loading 1s linear infinite alternate;\n  height: 30px;\n  border-radius: 12px;\n}\n\n@keyframes skeleton-loading {\n  0% {\n    background-color: hsl(200, 20%, 80%);\n  }\n  100% {\n    background-color: hsl(200, 20%, 95%);\n  }\n}\n</code></pre> <p>This creates a pulsing animation that alternates between two shades of gray, providing a visual indication that content is loading.</p>"},{"location":"developer/skeleton_loading/#loading-sequence","title":"Loading Sequence","text":"<p>The proper timing of skeleton states is crucial for a smooth user experience. The sequence works as follows:</p> <ol> <li>Form YAML defines initial component states with skeleton roles</li> <li>Form is displayed to user showing skeleton loading states</li> <li><code>form_show</code> event triggers after the form is visible</li> <li>Data is loaded and skeleton states are removed</li> </ol>"},{"location":"developer/skeleton_loading/#example-from-memberdetail","title":"Example from MemberDetail","text":"<pre><code># form_template.yaml\ncomponents:\n  - name: tb_firstname\n    type: TextBox\n    properties:\n      role: [outlined, skeleton]  # Initial skeleton state\n\n  - name: tb_lastname\n    type: TextBox\n    properties:\n      role: [outlined, skeleton]  # Initial skeleton state\n</code></pre> <pre><code># __init__.py\ndef form_show(self, **event_args):\n    \"\"\"This method is called when the form is shown on the page\"\"\"\n    with anvil.server.no_loading_indicator:\n        self.load_data()\n\ndef load_data(self):\n    # Fetch data from server\n    self.member = anvil.server.call('get_member_data', Global.tenant_id, self.email)\n\n    # Populate fields and remove skeleton states\n    self.tb_firstname.text = self.member['first_name']\n    self.tb_lastname.text = self.member['last_name']\n    self.tb_firstname.role = 'outlined'  # Remove skeleton role\n    self.tb_lastname.role = 'outlined'  # Remove skeleton role\n</code></pre> <p>This sequence ensures that: 1. Users see the skeleton loading state immediately when the form appears 2. The form layout is preserved while data loads 3. Content appears smoothly once data is ready</p>"},{"location":"developer/skeleton_loading/#usage-throughout-the-application","title":"Usage Throughout the Application","text":"<p>The skeleton role is used in several key areas of the application:</p>"},{"location":"developer/skeleton_loading/#member-components","title":"Member Components","text":"<ul> <li>In member rows (<code>Members/MemberRow</code>): Applied to name, sign-up date, and last login fields to show loading states before member data is loaded</li> <li>In member details (<code>MemberDetail</code>): Used on various input fields and labels while member information is being fetched</li> </ul>"},{"location":"developer/skeleton_loading/#role-management","title":"Role Management","text":"<ul> <li>In role details (<code>RoleDetail</code>): Applied to email fields and other input components during loading</li> <li>In role rows (<code>Roles/RoleRow</code>): Used on labels showing last update information</li> </ul>"},{"location":"developer/skeleton_loading/#reports","title":"Reports","text":"<ul> <li>In report components (<code>Reports/ReportRow</code>): Applied to labels to show loading states while report data is being generated</li> <li>In the router (<code>Router</code>): Used on report name labels during navigation</li> </ul>"},{"location":"developer/skeleton_loading/#setup-forms","title":"Setup Forms","text":"<ul> <li>In setup configuration (<code>Setup</code>): Applied to various input fields while loading configuration data, including:</li> <li>Discourse API settings</li> <li>PayPal integration settings</li> <li>Webhook configurations</li> <li>Group name fields</li> <li>URL inputs for waivers and documentation</li> </ul>"},{"location":"developer/skeleton_loading/#file-management","title":"File Management","text":"<ul> <li>In file rows (<code>RoleDetail/FileRow</code>): Applied to file information displays while loading</li> </ul>"},{"location":"developer/skeleton_loading/#integration-with-no_loading_indicator","title":"Integration with no_loading_indicator","text":"<p>The skeleton loading implementation is integrated with Anvil's <code>no_loading_indicator</code> context manager to prevent the default loading spinner from appearing during data fetching.</p>"},{"location":"developer/skeleton_loading/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Define skeleton states in YAML for immediate visual feedback: <pre><code>properties:\n  role: [outlined, skeleton]\n</code></pre></p> </li> <li> <p>Load data in the form_show event to ensure skeletons are visible: <pre><code>def form_show(self, **event_args):\n    with anvil.server.no_loading_indicator:\n        self.load_data()\n</code></pre></p> </li> <li> <p>Remove skeleton roles after populating data: <pre><code>def load_data(self):\n    data = anvil.server.call('get_data')\n    self.text_box.text = data['value']\n    self.text_box.role = 'outlined'  # Remove skeleton role\n</code></pre></p> </li> <li> <p>For components that combine roles, preserve other roles when removing skeleton: <pre><code># Initial state in YAML\nproperties:\n  role: [outlined, skeleton]\n\n# After loading\nself.text_box.role = 'outlined'\n</code></pre></p> </li> </ol> <p>This pattern ensures a smooth, professional loading experience where: - Users see immediate feedback through skeleton states - The page layout is stable during loading - No disruptive loading spinners appear - Content transitions smoothly once loaded</p>"},{"location":"user/getting_started/","title":"Getting Started with Not Alone","text":"<p>This guide will walk you through the process of joining and using the Not Alone platform.</p>"},{"location":"user/getting_started/#signing-up","title":"Signing Up","text":"<p>When you first visit Not Alone, you'll be presented with our clean, simple login interface:</p> <p></p>"},{"location":"user/getting_started/#google-sign-up-recommended","title":"Google Sign-Up (Recommended)","text":"<ol> <li>Click the \"Sign in with Google\" button at the top of the form</li> <li>Select your Google account or enter your Google credentials in the popup window</li> <li>Grant necessary permissions if prompted</li> <li>You'll be automatically logged in and redirected to the next step</li> </ol>"},{"location":"user/getting_started/#email-sign-up","title":"Email Sign-Up","text":"<ol> <li>Click the \"Sign up\" link below the sign-in form</li> <li>Fill out the registration form:</li> <li>Enter your email address</li> <li>Create a strong password</li> <li>Re-enter your password to confirm</li> <li>Click the \"Sign up\" button</li> <li>Check your email for a verification link</li> <li>Click the verification link to activate your account</li> </ol>"},{"location":"user/getting_started/#application-process","title":"Application Process","text":"<p>If your group requires an application:</p> <p></p> <ol> <li>Fill out the application form with relevant information, including booking an interview if needed as shown in the screenshot</li> <li>Submit your application</li> <li>Wait for review by group administrators</li> </ol>"},{"location":"user/getting_started/#profile-setup","title":"Profile Setup","text":"<p>After verifying your account, you'll need to complete your profile:</p> <p></p> <p>Fill out the required information:     - Full name     - Phone number     - Discord username (optional)</p> <p></p> <p>Consent to the code of conduct (linked)</p> <p>Subscribe to membership payments (if your group requires it)</p>"},{"location":"user/getting_started/#consent-agreement","title":"Consent Agreement","text":"<p>Before accessing group features, you must review and accept the consent form:</p> <ol> <li>After completing your profile, you'll be presented with the consent document</li> <li>Read through all sections carefully</li> <li>Check the box at the bottom to indicate your agreement</li> </ol>"},{"location":"user/getting_started/#interview-process-if-required","title":"Interview Process (If Required)","text":"<p>Some groups require an initial interview. If this applies to your group:</p> <ol> <li>Click on the link on the 'Apply' screen.</li> <li>Select an available time slot from the calendar</li> <li>Confirm your appointment</li> <li>You'll receive an email confirmation with:</li> <li>Interview date and time</li> <li>Any preparation instructions</li> <li>Link for virtual meetings (if applicable)</li> </ol>"},{"location":"user/getting_started/#payment-process-if-required","title":"Payment Process (If Required)","text":"<p>If your group requires a membership fee:</p> <ol> <li>Navigate to the payment section in your profile</li> <li>Review the fee structure</li> <li>Choose your payment method:</li> <li>Credit/Debit card</li> <li>PayPal (if available)</li> <li>Other available options</li> <li>Complete the secure payment process</li> <li>Keep your receipt for your records</li> </ol>"},{"location":"user/getting_started/#settings-and-preferences","title":"Settings and Preferences","text":"<p>You can customize your account settings at any time:</p> <p></p> <ol> <li>Access your settings through the menu</li> <li>Change your password</li> <li>Set up multi-factor authentication</li> </ol>"},{"location":"user/getting_started/#accessing-the-forum","title":"Accessing the Forum","text":"<p>Once all requirements are met (profile, consent, interview if required, and payment if required):</p> <ol> <li>Click the Forum tab in the main navigation menu</li> <li>You can then:<ul> <li>Browse existing discussions</li> <li>Create new topics</li> <li>Reply to other members</li> <li>Follow topics of interest</li> </ul> </li> </ol>"},{"location":"user/member_management/","title":"Member Management Guide","text":"<p>This guide covers how to manage members in the Not Alone app, including handling applications, member removals, and maintaining member notes.</p>"},{"location":"user/member_management/#managing-applications","title":"Managing Applications","text":""},{"location":"user/member_management/#viewing-applications","title":"Viewing Applications","text":"<p>Navigate to the Members screen and use the filter dropdown to view pending applications.</p> <p></p> <p>The filter allows you to view all pending applications.</p>"},{"location":"user/member_management/#reviewing-individual-applications","title":"Reviewing Individual Applications","text":"<p>Click on an applicant to view their information:</p> <p></p>"},{"location":"user/member_management/#application-actions","title":"Application Actions","text":"<p>For each application, you can:</p> <ol> <li> <p>Approve</p> <ul> <li>Removes 'Applicant' role and adds 'Approved' role.</li> <li>Triggers welcome email</li> </ul> </li> <li> <p>Decline</p> <ul> <li>Removes the 'Applicant' role.</li> </ul> </li> </ol>"},{"location":"user/member_management/#managing-members","title":"Managing Members","text":""},{"location":"user/member_management/#member-overview","title":"Member Overview","text":"<p>The Members screen provides a comprehensive view of all members:</p> <p></p> <p>Features include:</p> <ol> <li>Search functionality</li> <li>Filter options</li> <li>Status indicators</li> </ol>"},{"location":"user/member_management/#member-actions","title":"Member Actions","text":""},{"location":"user/member_management/#adding-notes","title":"Adding Notes","text":"<ol> <li>Select member profile</li> <li>Scroll to the notes section</li> <li>Enter note content</li> <li>Click 'Save Notes'</li> </ol>"},{"location":"user/member_management/#removal-process","title":"Removal Process","text":"<ol> <li>Navigate to member profile</li> <li>Click on each role to remove them and effectively remove the member from accessing your group.</li> <li>Write a note and click \"Save Notes\"</li> </ol>"},{"location":"user/member_management/#member-details","title":"Member Details","text":"<p>The member details screen provides comprehensive information about each member:</p> <p></p> <p>You can view and manage member's personal information and contact details.</p> <p></p> <p>The roles section allows you to manage member access and permissions within your organization.</p> <p></p> <p>Additional member information including payment status can be found by scrolling down. You can cancel payments for a member by clicking on 'Cancel Subscription'.</p>"}]}